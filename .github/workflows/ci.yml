name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: platform_migration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-wasip1
        components: rustfmt, clippy
    
    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install Dependencies
      run: |
        cargo install cargo-component
        cargo install sqlx-cli
        
        # Install Spin CLI
        curl -fsSL https://developer.fermyon.com/downloads/install.sh | bash
        echo "$HOME/.spin/bin" >> $GITHUB_PATH
    
    - name: Setup Database
      run: |
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/platform_migration_test"
        sqlx database create
        # Note: Migrations will be added when service structure is complete
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/platform_migration_test
    
    - name: Check Formatting
      run: |
        # Check if Rust files exist before formatting
        if find . -name "*.rs" -type f | head -1 | grep -q .; then
          cargo fmt --check
        else
          echo "No Rust files found, skipping format check"
        fi
    
    - name: Lint with Clippy
      run: |
        # Check if Rust projects exist before linting
        if find . -name "Cargo.toml" -type f | head -1 | grep -q .; then
          cargo clippy --all-targets --all-features -- -D warnings
        else
          echo "No Cargo projects found, skipping clippy check"
        fi
    
    - name: Run Tests - Document Service
      run: |
        if [ -d "services/document-service" ] && [ -f "services/document-service/Cargo.toml" ]; then
          cd services/document-service
          cargo test
          cd ../..
        else
          echo "Document service not found, skipping tests"
        fi
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/platform_migration_test
        RUST_LOG: debug
    
    - name: Run Tests - Notification Service
      run: |
        if [ -d "services/notification-service" ] && [ -f "services/notification-service/Cargo.toml" ]; then
          cd services/notification-service
          cargo test
          cd ../..
        else
          echo "Notification service not found, skipping tests"
        fi
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/platform_migration_test
        RUST_LOG: debug
    
    - name: Build Document Service
      run: |
        if [ -d "services/document-service" ] && [ -f "services/document-service/spin.toml" ]; then
          cd services/document-service
          spin build
          cd ../..
        else
          echo "Document service Spin config not found, skipping build"
        fi
    
    - name: Build Notification Service
      run: |
        if [ -d "services/notification-service" ] && [ -f "services/notification-service/Cargo.toml" ]; then
          cd services/notification-service
          cargo build --release
          cd ../..
        else
          echo "Notification service not found, skipping build"
        fi

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install Security Tools
      run: |
        cargo install cargo-audit || echo "cargo-audit installation failed"
        cargo install cargo-deny || echo "cargo-deny installation failed"
    
    - name: Security Audit
      run: |
        # Only run if Cargo projects exist
        if find . -name "Cargo.toml" -type f | head -1 | grep -q .; then
          cargo audit || echo "Security audit completed with warnings"
        else
          echo "No Cargo projects found, skipping security audit"
        fi
    
    - name: License and Dependency Check
      run: |
        # Only run if Cargo projects exist and cargo-deny is available
        if find . -name "Cargo.toml" -type f | head -1 | grep -q . && command -v cargo-deny &> /dev/null; then
          cargo deny check || echo "Dependency check completed with warnings"
        else
          echo "No Cargo projects found or cargo-deny not available, skipping dependency check"
        fi

  kubernetes-validation:
    name: Kubernetes Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Validate Kubernetes Manifests
      run: |
        # Check if deployment manifests exist
        if [ -d "deployments" ]; then
          # Validate YAML syntax
          find deployments -name "*.yaml" -o -name "*.yml" | xargs -I {} kubectl apply --dry-run=client --validate=true -f {} || echo "Some manifests have validation warnings"
        else
          echo "No deployment manifests found, skipping validation"
        fi
    
    - name: Install kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
    
    - name: Validate Kustomize
      run: |
        # Check if kustomization files exist
        if find deployments -name "kustomization.yaml" -o -name "kustomization.yml" | head -1 | grep -q .; then
          find deployments -name "kustomization.yaml" -o -name "kustomization.yml" | while read -r file; do
            dir=$(dirname "$file")
            echo "Validating kustomization in $dir"
            kustomize build "$dir" | kubectl apply --dry-run=client --validate=true -f - || echo "Kustomization in $dir has validation warnings"
          done
        else
          echo "No kustomization files found, skipping validation"
        fi

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check Documentation
      run: |
        echo "Checking documentation structure..."
        
        # Check if main documentation files exist
        required_docs=(
          "README.md"
          "CONTRIBUTING.md"
          "LICENSE"
        )
        
        missing_docs=()
        for doc in "${required_docs[@]}"; do
          if [ ! -f "$doc" ]; then
            missing_docs+=("$doc")
          fi
        done
        
        if [ ${#missing_docs[@]} -eq 0 ]; then
          echo "‚úÖ All required documentation files are present"
        else
          echo "‚ùå Missing documentation files: ${missing_docs[*]}"
          exit 1
        fi
        
        # Check documentation directory structure
        if [ -d "docs" ]; then
          echo "‚úÖ Documentation directory exists"
          find docs -name "*.md" | head -10 | while read -r file; do
            echo "  üìÑ Found: $file"
          done
        else
          echo "‚ö†Ô∏è  No docs directory found"
        fi
    
    - name: Check Links (Basic)
      run: |
        echo "Checking for broken internal links in documentation..."
        
        # Basic check for internal markdown links
        if command -v grep &> /dev/null; then
          find . -name "*.md" -type f | xargs grep -l "\](\./" | while read -r file; do
            echo "Checking links in $file"
            grep -o "\]([^)]*)" "$file" | grep "\./" | while read -r link; do
              target=$(echo "$link" | sed 's/](\.\///' | sed 's/).*//')
              if [ ! -f "$target" ] && [ ! -d "$target" ]; then
                echo "‚ö†Ô∏è  Potentially broken link in $file: $target"
              fi
            done
          done
        fi

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, security, kubernetes-validation, documentation]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.test.result == 'success' && needs.security.result == 'success' && needs.kubernetes-validation.result == 'success' && needs.documentation.result == 'success'
      run: |
        echo "üéâ All CI checks passed successfully!"
        echo "‚úÖ Tests: Passed"
        echo "‚úÖ Security: Passed"
        echo "‚úÖ Kubernetes: Passed"
        echo "‚úÖ Documentation: Passed"
    
    - name: Notify Failure
      if: needs.test.result == 'failure' || needs.security.result == 'failure' || needs.kubernetes-validation.result == 'failure' || needs.documentation.result == 'failure'
      run: |
        echo "‚ùå Some CI checks failed"
        echo "Tests: ${{ needs.test.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Kubernetes: ${{ needs.kubernetes-validation.result }}"
        echo "Documentation: ${{ needs.documentation.result }}"
        exit 1